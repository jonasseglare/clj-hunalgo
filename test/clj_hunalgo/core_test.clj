(ns clj-hunalgo.core-test
  (:require [clojure.test :refer [deftest is]]
            [clj-hunalgo.core :refer [solve-assignment-problem-ij-pairs
                                      solve-assignment-problem-ji-pairs]]))

;; Many of these tests are generated using the results from the implementation at
;;
;; https://github.com/aalmi/HungarianAlgorithm/blob/master/HungarianAlgorithm.java
;;
;; as reference.

(deftest test-hungarian-algorithm
  (is
   (=
    [[0 3] [1 0] [2 1] [3 2]]
    (solve-assignment-problem-ji-pairs
     [[1 0 1 1] [1 1 0 1] [1 1 1 0] [0 1 1 1]])))
  (is (= '([0 1] [1 2] [2 3] [3 0])
         (solve-assignment-problem-ij-pairs [[1 0 1 1]
                                             [1 1 0 1]
                                             [1 1 1 0]
                                             [0 1 1 1]])))
  (is (= [[0 2] [1 1] [2 0] [3 3]]
         (solve-assignment-problem-ji-pairs [[70  40   20   55]
                                             [65  60   45   90]
                                             [30  45   50   75]
                                             [25  30   55   40]])))
  (is
   (=
    [[0 1] [1 0] [2 4] [3 2] [4 3]]
    (solve-assignment-problem-ji-pairs
     [[2 0 1 1 0] [0 2 0 2 2] [1 1 1 0 1] [1 2 2 2 1] [1 1 1 1 2]])))
  (is
   (=
    [[0 0] [1 3] [2 4] [3 2] [4 1]]
    (solve-assignment-problem-ji-pairs
     [[0 1 0 1 1] [1 1 1 1 0] [1 1 1 0 1] [1 0 0 0 1] [0 1 0 0 0]])))
  (is
   (=
    [[0 0] [1 1] [2 2] [3 3] [4 5] [5 6] [6 7] [7 8] [8 4] [9 9]]
    (solve-assignment-problem-ji-pairs
     [[0 1 0 0 0 0 1 0 1 1]
      [1 0 1 0 0 1 0 0 1 0]
      [1 0 0 1 0 1 1 0 1 1]
      [0 0 0 0 1 0 1 1 0 1]
      [0 0 1 1 1 1 1 1 0 1]
      [1 1 0 0 0 0 1 0 0 0]
      [0 1 0 1 0 0 1 0 1 1]
      [0 1 1 1 0 1 0 1 1 1]
      [1 0 1 0 1 0 1 0 0 0]
      [1 0 0 0 0 1 1 1 1 0]])))
  (is
   (=
    [[0 9] [1 2] [2 3] [3 6] [4 4] [5 0] [6 8] [7 1] [8 5] [9 7]]
    (solve-assignment-problem-ji-pairs
     [[3 5 4 2 0 2 4 2 3 4]
      [4 4 4 2 2 3 0 0 0 0]
      [5 1 5 5 5 5 0 0 4 4]
      [5 4 1 4 2 3 4 3 5 4]
      [5 1 4 2 0 5 1 0 4 4]
      [3 2 2 2 2 3 4 2 0 5]
      [0 2 0 0 0 4 1 3 1 3]
      [5 4 1 2 3 5 3 4 2 1]
      [2 3 2 5 2 4 1 5 4 5]
      [0 1 2 3 5 3 0 4 3 2]])))
  (is
   (=
    [[0 3] [1 5] [2 2] [3 7] [4 1] [5 0] [6 8] [7 9] [8 6] [9 4]]
    (solve-assignment-problem-ji-pairs
     [[1 3 5 5 5 0 3 4 3 0]
      [1 1 4 4 1 1 3 2 4 5]
      [0 2 0 3 2 2 5 1 2 0]
      [0 3 5 4 4 5 0 4 0 3]
      [2 5 0 3 2 2 2 2 4 0]
      [5 0 0 5 3 0 1 3 2 3]
      [3 4 1 3 5 1 4 4 0 3]
      [4 2 0 0 0 3 3 2 4 1]
      [4 2 1 5 2 3 0 1 4 5]
      [4 5 0 2 4 5 1 0 0 5]])))
  (is
   (=
    [[0 4] [1 3] [2 1] [3 0] [4 2]]
    (solve-assignment-problem-ji-pairs
     [[5 2 1 1 2] [4 2 1 2 1] [4 5 4 4 1] [5 1 0 4 0] [4 2 5 5 3]])))
  (is
   (=
    [[0 1] [1 7] [2 2] [3 5] [4 3] [5 6] [6 8] [7 4] [8 9] [9 0]]
    (solve-assignment-problem-ji-pairs
     [[59 57 21 36 12 100 97 53 52 7]
      [30 70 54 78 34 40 92 27 70 12]
      [35 78 3 25 7 60 13 67 42 40]
      [95 76 19 57 0 60 45 68 85 30]
      [73 46 57 82 56 32 37 21 69 53]
      [28 44 18 29 3 96 27 69 62 98]
      [73 0 66 97 15 21 71 31 53 85]
      [78 15 26 87 79 39 81 44 96 48]
      [80 38 18 21 85 86 18 97 83 44]
      [33 68 68 92 56 12 91 41 21 21]])))
  (is
   (=
    [[0 0] [1 1] [2 7] [3 4] [4 3] [5 6] [6 9] [7 8] [8 2] [9 5]]
    (solve-assignment-problem-ji-pairs
     [[6 871 651 276 916 542 443 820 785 270]
      [514 97 996 810 641 269 196 82 602 701]
      [393 710 668 985 383 85 495 892 134 373]
      [262 555 698 597 0 894 857 751 575 421]
      [233 706 470 323 807 528 590 921 833 709]
      [528 412 956 720 396 86 931 269 130 57]
      [708 578 327 900 822 48 120 509 944 696]
      [274 921 201 814 680 754 336 433 697 514]
      [81 271 337 925 195 37 111 86 421 141]
      [458 299 292 105 109 38 80 213 352 693]])))
  (is
   (=
    [[0 0] [1 4] [2 3] [3 2] [4 1]]
    (solve-assignment-problem-ji-pairs
     [[6 7 7 7 6] [9 5 9 8 6] [4 8 3 1 7] [5 1 2 10 5] [5 1 2 8 3]]))))
